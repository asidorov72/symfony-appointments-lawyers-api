@startuml
title Symfony 5 Appointments Lawyers RESTful API. Endpoints exposed to user

actor "User" as U
participant "Appointments Lawyers RESTful API" as API
participant "Mysql database" as DB

== 1. Index page \n ==

autonumber 1
U -> API: GET /www.plantuml.com
API -> U: Return Status Code: 404

== 2. Health Check \n ==

autonumber 1
U -> API: GET /healthcheck
alt service is up and running
    API -> U: Return Status Code: 204
else service is down
    API -> U: Return Status Code: 500
end

== 3. Add Citizen\n ==

autonumber 1
U -> API: POST /citizen
alt save citizen
   API -> DB: Accept citizen as JSON object and insert it in Database
   API -> U:  Return Status Code: 201
else error not authorized
   API -> U:  Return Status Code: 401
else error bad request
   API -> U:  Return Status Code: 400
end

== 4. Add Lawyer\n ==

autonumber 1
U -> API: POST /lawyer
alt save lawyer
   API -> DB: Accept lawyer as JSON object and insert it in Database
   API -> U:  Return Status Code: 201
else error not authorized
   API -> U:  Return Status Code: 401
else error bad request
   API -> U:  Return Status Code: 400
end

== 5. Citizen/Lawyer Login\n ==

autonumber 1
U -> API: POST /login
alt returns X-Auth-Token
   API -> DB: Accept citizen/lawyer as JSON object, find it [by email parameter] in Database.
   API -> U:  If found - generate X-Auth-Token (uuid), save it in the Database and return X-Auth-Token. Return Status Code: 201
else error not authorized
   API -> U:  Return Status Code: 403
else error bad request
   API -> U:  Return Status Code: 400
end

== 6. Create appointment\n ==

autonumber 1
U -> API: POST /appointment
alt using X-Auth-Token recieved after login save appointment
   API -> DB: Accept appointment as JSON object and insert it in Database
   API -> U:  Successfully saved. Return Status Code: 201
else error not authorized
   API -> U:  Not authorized. Return Status Code: 401
else error invalid x-auth-token
   API -> U:  Invalid X-Auth-Token. Return Status Code: 403
else error bad request
   API -> U:  Return Status Code: 400
end

== 7. Update appointment\n ==

autonumber 1
U -> API: PUT /appointment
alt using X-Auth-Token recieved after login and appointmentId it from payload update appointment
   API -> DB: Accept appointment as JSON object and update it in Database
   API -> U:  Successfully updated. Return Status Code: 200
else error not authorized
   API -> U:  Not authorized. Return Status Code: 401
else error invalid x-auth-token
   API -> U:  Invalid X-Auth-Token. Return Status Code: 403
else error bad request
   API -> U:  Return Status Code: 400
end

== 8. Update appointment status\n ==

autonumber 1
U -> API: PATCH /appointment
alt using X-Auth-Token recieved after login and appointmentId it from payload update appointment fields paymentStatus and status
   API -> DB: Accept appointment as JSON object and update it in Database
   API -> U:  Successfully updated fields. Return Status Code: 204
else error not authorized
   API -> U:  Not authorized. Return Status Code: 401
else error invalid x-auth-token
   API -> U:  Invalid X-Auth-Token. Return Status Code: 403
else error bad request
   API -> U:  Return Status Code: 400
end

== 9. Citizen/Lawyer Logout\n ==

autonumber 1
U -> API: POST /logout
alt delete X-Auth-Token
   API -> DB: Accept X-Auth-Token in headers, find it in Database and delete it.
   API -> U:  If X-Auth-Token (uuid) where deleted return Status Code: 204
else error not authorized
   API -> U:  Return Status Code: 403
else error bad request
   API -> U:  Return Status Code: 400
end

== 10. Citizens list\n ==

autonumber 1
U -> API: GET /citizen/{page}
alt output citizens list by page. By 4 citizens on a page
   API -> DB: Find citizens in Database by offset calculated via page number and limit.
   API -> U:  Return citizens to User. Return Status Code: 200
else error not authorized
   API -> U:  Return Status Code: 401
else error bad request if nothing was found
   API -> U:  Return Status Code: 400
end

== 11. Lawyers list\n ==

autonumber 1
U -> API: GET /lawyer/{page}
alt output lawyers list by page. By 4 lawyers on a page
   API -> DB: Find lawyers in Database by offset calculated via page number and limit.
   API -> U:  Return lawyers to User. Return Status Code: 200
else error not authorized
   API -> U:  Return Status Code: 401
else error bad request if nothing was found
   API -> U:  Return Status Code: 400
end

== 12. Appointments list\n ==

autonumber 1
U -> API: GET /appointment/{page}
alt output appointments list by page. By 4 appointments on a page
   API -> DB: Find appointments in Database by offset calculated via page number and limit.
   API -> U:  Return appointments to User. Return Status Code: 200
else error not authorized
   API -> U:  Return Status Code: 401
else error bad request if nothing was found
   API -> U:  Return Status Code: 400
end
@enduml